*vital-argument-parser.txt*	A high functional argument parser

Version: 0.2.0
Author:  Alisue <lambdalisue@hashnote.net>	*Vital.ArgumentParser-author*
Support: Vim 7.3 and above
License: MIT license  {{{
	Copyright (c) 2014 Alisue, hashnote.net

	Permission is hereby granted, free of charge, to any person obtaining
	a copy of this software and associated documentation files
	(the "Software"), to deal in the Software without restriction,
	including without limitation the rights to use, copy, modify, merge,
	publish, distribute, sublicense, and/or sell copies of the Software,
	and to permit persons to whom the Software is furnished to do so,
	subject to the following conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}


==============================================================================
CONTENTS				*Vital.ArgumentParser-contents*

Introductions		|Vital.ArgumentParser-introductions|
Usage			|Vital.ArgumentParser-usage|
Functions		|Vital.ArgumentParser-functions|
Objects			|Vital.ArgumentParser-objects|
  Parser		|Vital.ArgumentParser-parser|
  Completer		|Vital.ArgumentParser.Completer|
Validation		|Vital.ArgumentParser-validation|
Hooks			|Vital.ArgumentParser-hooks|

==============================================================================
INTRODUCTIONS				*Vital.ArgumentParser-introductions*

*Vital.ArgumentParser* is a high functional argument (option) parser which
concept was taken from |Vital.OptionParser| and argparse.ArgumentParser of
Python.


==============================================================================
USAGE					*Vital.ArgumentParser-usage*

Create a new instance of a parser with |Vital.ArgumentParser.new()| function.
Then define arguments with |Vital.ArgumentParser-instance.add_argument()|.
See the following example code:
>
	let s:V = vital#of('vital')
	let s:A = s:V.import('ArgumentParser')
	
	function! s:callback(opts) abort " {{{
	  echo a:opts
	endfunction " }}}
	
	let s:parser = s:A.new({
	      \ 'name': 'ArgumentParser',
	      \ 'description': 'An ArgumentParser demo command',
	      \})
	" basic
	call s:parser.add_argument('--foo', 'A simple argument')
	call s:parser.add_argument('--bar', '-b', 'A simple argument with alias')
	call s:parser.add_argument('--hoge', "multiline\ndescription")
	call s:parser.add_argument('--piyo', ['multiline', 'description', 'with list'])
	call s:parser.add_argument('--puyo', 'ANY argument', { 'type': s:A.types.any })
	call s:parser.add_argument('--poyo', 'VALUE argument', { 'type': s:A.types.value })
	call s:parser.add_argument('--payo', 'CHOICE argument', { 'choices': ['a', 'b', 'c'] })
	
	" required
	" ArgumentParser command will fail without --required
	call s:parser.add_argument('--required', { 'required': 1 })
	
	" conflict
	" ArgumentParser command will fail when more than two of
	" --conflict1, --conflict2, --conflict3 are specified
	call s:parser.add_argument('--conflict1', { 'conflicts': ['conflict2', 'conflict3'] })
	call s:parser.add_argument('--conflict2', { 'conflicts': ['conflict1', 'conflict3'] })
	call s:parser.add_argument('--conflict3', { 'conflicts': ['conflict1', 'conflict2'] })
	
	" superordinate and subordinate (require at least one)
	" ArgumentParser command will fail when --subordinate is specified but
	" non of --superordinate1 nor --superordinate2 is specified
	call s:parser.add_argument('--superordinate1')
	call s:parser.add_argument('--superordinate2')
	call s:parser.add_argument('--subordinate', { 'superordinates': ['superordinate1', 'superordinate2'] })
	
	" dependencies (require all)
	" ArgumentParser command will fail when --baby is specified but
	" --papa nor --mama is specified
	call s:parser.add_argument('--papa')
	call s:parser.add_argument('--mama')
	call s:parser.add_argument('--baby', { 'dependencies': ['papa', 'mama'] })
	
	" pattern
	" ArgumentParser command will fail when --pattern is specified and the value
	" does not follow the specified pattern
	call s:parser.add_argument('--pattern', { 'pattern': '\v\d{3}-\d{4}' })
	
	" positional argument
	call s:parser.add_argument('positional1', { 'choices': [
	      \ 'positional1_a',
	      \ 'positional1_b',
	      \ 'positional1_c',
	      \]})
	call s:parser.add_argument('positional2')
	
	function! s:ArgumentParserParse(...) abort
	  let opts = call(s:parser.parse, a:000, s:parser)
	  if !empty(opts)
	    echo opts
	  endif
	endfunction
	function! s:ArgumentParserComplete(...) abort
	  return call(s:parser.complete, a:000, s:parser)
	endfunction
	command! -nargs=? -range -bang
	      \ -complete=customlist,s:ArgumentParserComplete ArgumentParser
	      \ :call s:ArgumentParserParse(<q-bang>, [<line1>, <line2>], <f-args>)
<
This paresr automatically add '--help' argument to show a help like:
>
	:ArgumentParser [positional1] [positional2] [--help] [--foo] [--bar] [--hoge] [--piyo] [--puyo[=PUYO]] [--poyo=POYO] [--payo={PAYO}] --required [--conflict1] [--conflict2] [--conflict3] [--superordinate1] [--superordinate2] [--subordinate] [--papa] [--mama] [--baby] [--pattern=PATTERN]
	
	An ArgumentParser demo command
	
	Positional arguments:
	  positional1            
	  positional2            
	
	Optional arguments:
	  -h, --help             show this help
	      --foo              A simple argument
	  -b, --bar              A simple argument with alias
	      --hoge             multiline
	                         description
	      --piyo             multiline
	                         description
	                         with list
	      --puyo[=PUYO]      ANY argument
	      --poyo=POYO        VALUE argument
	      --payo={PAYO}      CHOICE argument
	      --required          (*)
	      --conflict1        
	      --conflict2        
	      --conflict3        
	      --superordinate1   
	      --superordinate2   
	      --subordinate      
	      --papa             
	      --mama             
	      --baby             
	      --pattern=PATTERN  
<

==============================================================================
FUNCTIONS				*Vital.ArgumentParser-functions*

splitargs({str})			*Vital.ArgumentParser.splitargs()*

	Split a {str} (|String|) into a |List|.
>
	let s:A = s:V.import('ArgumentParser')
	echo s:A.splitargs('foo bar')
	" ['foo', 'bar']
	echo s:A.splitargs('foo "bar bar" hoge')
	" ['foo', '"bar bar"', 'hoge']
	echo s:A.splitargs('foo=foo bar="bar bar" hoge')
	" ['foo=foo', 'bar="bar bar"', 'hoge']
<
strip_quotes({str})			*Vital.ArgumentParser.strip_quotes()*

	Strip quotes (' or ") from {str}

new([{settings}])			*Vital.ArgumentParser.new()*
	
	Make an argument instance. It return |Dictionary| which is like an
	object in OOP. {settings} is a |Dictionary| to configure the parser
	instance.

	{settings}
	
		'name'
		A name of the command. Used in help.

		'description'
		A description of the command. Used in help.

		'auto_help'
		1 to create help argument automatically. Default is 1

		'validate_required'
		Validate missing required argument. Default is 1

		'validate_types'
		Validate argument type mismatch. Default is 1

		'validate_conflicts'
		Validate conflicted arguments. Default is 1

		'validate_superordinates'
		Validate missing superordinate arguments. Default is 1

		'validate_dependencies'
		Validate missing dependencies. Default is 1

		'validate_pattern'
		Validate pattern of argument values. Default is 1

		'enable_positional_assign'
		1 to enable '--foo bar' type value assign. Default is 1


==============================================================================
OBJECTS					*Vital.ArgumentParser-objects*

------------------------------------------------------------------------------
PARSER				*Vital.ArgumentParser-parser*

				*Vital.ArgumentParser-Parser.add_argument()*
Parser.add_argument({name} [, {options}])
Parser.add_argument({name} [, {description}, {options}])
Parser.add_argument({name} [, {alias}, {description}])
Parser.add_argument({name} [, {alias}, {description}, {options}])

	Define a new argument to the parser.

	{name} (required)
	|String| value. A name of the argument. It is used as an entry name
	as well.  If the value start from '--' or '-', then the argument will
	be treated as an optional argument. Otherwise it will be treated as a
	positional argument.

	{alias} (optional)
	|String| value. An alias name of the argument.
	It must start from '-'.

	{description} (optional)
	|String| value. A description string of the argument.
	It is used in help.

	{options} (optional)
	|Dictionary| value. A extra options of the arguments

		'terminal'
		0 or 1. If it is 1, parsing will be terminated after parsing
		this argument, namely all arguments later than this argument
		will be listed in '__unknown__' property.
>
		call parser.add_argument('--foo', { 'terminal': 1 })
		call parser.add_argument('--bar')
		echo parser.parse('', [0, 0], '--foo --bar')
		{
		    'foo': 1,
		    '__bang__': 0,
		    '__range__': [0, 0],
		    '__args__': ['--foo', '--bar'],
		    '__unknown__': ['--bar'],
		}
<
		'required'
		0 or 1. If it is 1, the parser will complain when the argument
		is not specified in validation step.

		'default'
		A default value of the argument.

		'on_default'
		A default value of the argument when the argument is specified
		without a value.

		'type'				*Vital.ArgumentParser-types*
		A type of the argument. You can specify one of the followings
		- *Vital.ArgumentParser-types-any*
		  This type can be a switch or value.
		- *Vital.ArgumentParser-types-switch*
		  This type cannot take a value. Useful for switch. Default
		  for an optional argument.
		- *Vital.ArgumentParser-types-value*
		  This type require a value. Useful for positional argument.
		  Default for a positional argument or an argument which has
		  'pattern' option.
		- *Vital.ArgumentParser-types-choice*
		  This type require a value which listed in 'choices' option.
		  Default for an argument which has 'choices' option.

		'deniable'
		0 or 1. If it is 1, a negative value can be specified with
		'--no-' prefix. See the following code
>
		call parser.add_argument('--foo', { 'deniable': 1 })
		echo parser.parse('', [0, 0], '')
		{
		    '__bang__': 0,
		    '__range__': [0, 0],
		    '__args__': [],
		    '__unknown__': [],
		}
		echo parser.parse('', [0, 0], '--foo')
		{
		    'foo': 1,
		    '__bang__': 0,
		    '__range__': [0, 0],
		    '__args__': [],
		    '__unknown__': [],
		}
		echo parser.parse('', [0, 0], '--no-foo')
		{
		    'foo': 0,
		    '__bang__': 0,
		    '__range__': [0, 0],
		    '__args__': [],
		    '__unknown__': [],
		}
<
		'choices'
		A |List| value. |Vital.ArgumentParser-types-choice| only allow the
		values in the list. If this value is specified, 'type' will
		automatically be |Vital.ArgumentParser-types-choice|.

		'pattern'
		A |String| value. The value required to follow the specified
		pattern (regex). If this value is specified, 'type' will
		automatically be |Vital.ArgumentParser-types-value|.

		'completer'
		An instance of |Vital.ArgumentParser.Completer|.
		If nothing is specified, 'file' completer is used as a
		default completer.

		UNDER DEVELOPMENT.

		'conflicts'
		A ||List|. You can specify a conflict argument names to this option.
		All arguments specified cannot be specified in the same time
		with this argument.

		'dependencies'
		A |List|. If an argument has dependencies, all of the
		dependencies are required to be specified.
		Otherwise the parser complain that in validation step.

		'superordinates'
		A ||List|. If an argument has superordinate arguments, at least one of
		the superordinate arguments is required to be specified.
		Otherwise the parser complain that in validation step.

				*Vital.ArgumentParser-Parser.get_conflicted_arguments()*
Parser.get_conflicted_arguments({name}, {opts})

	Return a |List| of conflicted argument names of {name} in {opts}.

				*Vital.ArgumentParser-Parser.get_superordinate_arguments()*
Parser.get_superordinate_arguments({name}, {opts})

	Return a |List| of superordinate argument names of {name} in {opts}.

				*Vital.ArgumentParser-Parser.get_missing_dependencies()*
Parser.get_missing_dependencies({name}, {opts})

	Return a |List| of missing dependencies of {name} in {opts}.

				*Vital.ArgumentParser-Parser.parse()*
Parser.parse({bang}, {range} [, {f-args}])
	
	Parse arguments of |command| and return a |Dictionary|

	{bang}
	A |Number| or |String|. You should specify <q-bang>

	{range}
	A |List|. You should specify [<line1>, <line2>]

	{f-args}
	A |String|. You should specify <f-args>

	The return value contains all parsed arguments and the following
	special properties

		'__args__'
		A |List| of arguments specified.

		'__bang__'
		0 or 1 which indicate if '!' is specified

		'__range__'
		A |List| which indicate the range of selection

		'__unknown__'
		A |List| of arguments which had not parsed.

				*Vital.ArgumentParser-Parser.complete()*
Parser.complete({arglead}, {cmdline}, {cursorpos}[, {opts}])

	Used to complete arguments and its values in command line.
	
	TODO

				*Vital.ArgumentParser-Parser.help()*
Parser.help()

	Display help.

------------------------------------------------------------------------------
COMPLETER				*Vital.ArgumentParser.Completer*


==============================================================================
Validation				*Vital.ArgumentParser-validation*

TODO

==============================================================================
Hooks						*Vital.ArgumentParser-hooks*

TODO

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
